//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

@IsTest
public class JSON2ApexIntegration_Test {
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{'+
		'	\"transaction\": {'+
		'		\"id\": \"11e787c69b1f005ebb5ac08f\",'+
		'		\"payment_method\": \"cc\",'+
		'		\"account_vault_id\": null,'+
		'		\"recurring_id\": null,'+
		'		\"first_six\": \"411111\",'+
		'		\"last_four\": \"1111\",'+
		'		\"account_holder_name\": null,'+
		'		\"transaction_amount\": \"50.00\",'+
		'		\"description\": null,'+
		'		\"transaction_code\": null,'+
		'		\"avs\": null,'+
		'		\"batch\": \"1\",'+
		'		\"order_num\": \"766217846000\",'+
		'		\"verbiage\": \"APPROVAL\",'+
		'		\"transaction_settlement_status\": null,'+
		'		\"effective_date\": null,'+
		'		\"routing\": null,'+
		'		\"return_date\": null,'+
		'		\"created_ts\": 1503467273,'+
		'		\"modified_ts\": 1503467273,'+
		'		\"transaction_api_id\": null,'+
		'		\"terms_agree\": null,'+
		'		\"notification_email_address\": null,'+
		'		\"notification_email_sent\": true,'+
		'		\"response_message\": null,'+
		'		\"auth_amount\": \"50.00\",'+
		'		\"auth_code\": \"87c69b\",'+
		'		\"status_id\": 101,'+
		'		\"type_id\": 20,'+
		'		\"location_id\": \"11e77b6f5730545a87cc3702\",'+
		'		\"reason_code_id\": 1000,'+
		'		\"contact_id\": null,'+
		'		\"billing_zip\": null,'+
		'		\"billing_street\": null,'+
		'		\"product_transaction_id\": \"11e77b6f58219c8eb935a9c2\",'+
		'		\"tax\": 0,'+
		'		\"customer_ip\": null,'+
		'		\"customer_id\": null,'+
		'		\"po_number\": null,'+
		'		\"avs_enhanced\": \"V\",'+
		'		\"cvv_response\": \"N\",'+
		'		\"billing_phone\": null,'+
		'		\"billing_city\": null,'+
		'		\"billing_state\": null,'+
		'		\"clerk_number\": null,'+
		'		\"tip_amount\": \"0.00\",'+
		'		\"created_user_id\": \"11e76e458be8fe4aaf3ff8b1\",'+
		'		\"modified_user_id\": \"11e76e458be8fe4aaf3ff8b1\",'+
		'		\"settle_date\": null,'+
		'		\"charge_back_date\": null,'+
		'		\"void_date\": null,'+
		'		\"account_type\": \"visa\",'+
		'		\"is_recurring\": false,'+
		'		\"is_accountvault\": false,'+
		'		\"transaction_c1\": null,'+
		'		\"transaction_c2\": null,'+
		'		\"transaction_c3\": null,'+
		'		\"additional_amounts\": ['+
		''+
		'		],'+
		'		\"terminal_serial_number\": null,'+
		'		\"entry_mode_id\": \"K\",'+
		'		\"terminal_id\": null,'+
		'		\"checkin_date\": \"2017-08-10\",'+
		'		\"checkout_date\": \"2017-08-10\",'+
		'		\"room_num\": null,'+
		'		\"room_rate\": \"5.00\",'+
		'		\"advance_deposit\": false,'+
		'		\"no_show\": false,'+
		'		\"emv_receipt_data\": null,'+
		'		\"_links\": {'+
		'			\"self\": {'+
		'				\"href\": \"https://apiv2.sandbox.zeamster.com/v2/transactions/11e787c69b1f005ebb5ac08f\"'+
		'			}'+
		'		}'+
		'	}'+
		'}';
		JSON2ApexIntegration r = JSON2ApexIntegration.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		JSON2ApexIntegration.Links objLinks = new JSON2ApexIntegration.Links(System.JSON.createParser(json));
		System.assert(objLinks != null);
		System.assert(objLinks.self == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		JSON2ApexIntegration.Additional_amounts objAdditional_amounts = new JSON2ApexIntegration.Additional_amounts(System.JSON.createParser(json));
		System.assert(objAdditional_amounts != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		JSON2ApexIntegration.Self objSelf = new JSON2ApexIntegration.Self(System.JSON.createParser(json));
		System.assert(objSelf != null);
		System.assert(objSelf.href == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		JSON2ApexIntegration objJSON2ApexIntegration = new JSON2ApexIntegration(System.JSON.createParser(json));
		System.assert(objJSON2ApexIntegration != null);
		System.assert(objJSON2ApexIntegration.transaction_Z == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		JSON2ApexIntegration.Transaction_Z objTransaction_Z = new JSON2ApexIntegration.Transaction_Z(System.JSON.createParser(json));
		System.assert(objTransaction_Z != null);
		System.assert(objTransaction_Z.id == null);
		System.assert(objTransaction_Z.payment_method == null);
		System.assert(objTransaction_Z.account_vault_id == null);
		System.assert(objTransaction_Z.recurring_id == null);
		System.assert(objTransaction_Z.first_six == null);
		System.assert(objTransaction_Z.last_four == null);
		System.assert(objTransaction_Z.account_holder_name == null);
		System.assert(objTransaction_Z.transaction_amount == null);
		System.assert(objTransaction_Z.description == null);
		System.assert(objTransaction_Z.transaction_code == null);
		System.assert(objTransaction_Z.avs == null);
		System.assert(objTransaction_Z.batch == null);
		System.assert(objTransaction_Z.order_num == null);
		System.assert(objTransaction_Z.verbiage == null);
		System.assert(objTransaction_Z.transaction_settlement_status == null);
		System.assert(objTransaction_Z.effective_date == null);
		System.assert(objTransaction_Z.routing == null);
		System.assert(objTransaction_Z.return_date == null);
		System.assert(objTransaction_Z.created_ts == null);
		System.assert(objTransaction_Z.modified_ts == null);
		System.assert(objTransaction_Z.transaction_api_id == null);
		System.assert(objTransaction_Z.terms_agree == null);
		System.assert(objTransaction_Z.notification_email_address == null);
		System.assert(objTransaction_Z.notification_email_sent == null);
		System.assert(objTransaction_Z.response_message == null);
		System.assert(objTransaction_Z.auth_amount == null);
		System.assert(objTransaction_Z.auth_code == null);
		System.assert(objTransaction_Z.status_id == null);
		System.assert(objTransaction_Z.type_id == null);
		System.assert(objTransaction_Z.location_id == null);
		System.assert(objTransaction_Z.reason_code_id == null);
		System.assert(objTransaction_Z.contact_id == null);
		System.assert(objTransaction_Z.billing_zip == null);
		System.assert(objTransaction_Z.billing_street == null);
		System.assert(objTransaction_Z.product_transaction_id == null);
		System.assert(objTransaction_Z.tax == null);
		System.assert(objTransaction_Z.customer_ip == null);
		System.assert(objTransaction_Z.customer_id == null);
		System.assert(objTransaction_Z.po_number == null);
		System.assert(objTransaction_Z.avs_enhanced == null);
		System.assert(objTransaction_Z.cvv_response == null);
		System.assert(objTransaction_Z.billing_phone == null);
		System.assert(objTransaction_Z.billing_city == null);
		System.assert(objTransaction_Z.billing_state == null);
		System.assert(objTransaction_Z.clerk_number == null);
		System.assert(objTransaction_Z.tip_amount == null);
		System.assert(objTransaction_Z.created_user_id == null);
		System.assert(objTransaction_Z.modified_user_id == null);
		System.assert(objTransaction_Z.settle_date == null);
		System.assert(objTransaction_Z.charge_back_date == null);
		System.assert(objTransaction_Z.void_date == null);
		System.assert(objTransaction_Z.account_type == null);
		System.assert(objTransaction_Z.is_recurring == null);
		System.assert(objTransaction_Z.is_accountvault == null);
		System.assert(objTransaction_Z.transaction_c1 == null);
		System.assert(objTransaction_Z.transaction_c2 == null);
		System.assert(objTransaction_Z.transaction_c3 == null);
		System.assert(objTransaction_Z.additional_amounts == null);
		System.assert(objTransaction_Z.terminal_serial_number == null);
		System.assert(objTransaction_Z.entry_mode_id == null);
		System.assert(objTransaction_Z.terminal_id == null);
		System.assert(objTransaction_Z.checkin_date == null);
		System.assert(objTransaction_Z.checkout_date == null);
		System.assert(objTransaction_Z.room_num == null);
		System.assert(objTransaction_Z.room_rate == null);
		System.assert(objTransaction_Z.advance_deposit == null);
		System.assert(objTransaction_Z.no_show == null);
		System.assert(objTransaction_Z.emv_receipt_data == null);
		System.assert(objTransaction_Z.x_links == null);
	}
}