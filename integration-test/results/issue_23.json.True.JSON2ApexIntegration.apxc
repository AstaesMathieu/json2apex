//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class JSON2ApexIntegration {

	public class Links {
		public Self self {get;set;} 

		public Links(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'self') {
							self = new Self(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Links consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Additional_amounts {

		public Additional_amounts(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						{
							System.debug(LoggingLevel.WARN, 'Additional_amounts consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Self {
		public String href {get;set;} 

		public Self(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'href') {
							href = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Self consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Transaction_Z transaction_Z {get;set;} // in json: transaction

	public JSON2ApexIntegration(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'transaction') {
						transaction_Z = new Transaction_Z(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'JSON2ApexIntegration consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Transaction_Z {
		public String id {get;set;} 
		public String payment_method {get;set;} 
		public Object account_vault_id {get;set;} 
		public Object recurring_id {get;set;} 
		public String first_six {get;set;} 
		public String last_four {get;set;} 
		public Object account_holder_name {get;set;} 
		public String transaction_amount {get;set;} 
		public Object description {get;set;} 
		public Object transaction_code {get;set;} 
		public Object avs {get;set;} 
		public String batch {get;set;} 
		public String order_num {get;set;} 
		public String verbiage {get;set;} 
		public Object transaction_settlement_status {get;set;} 
		public Object effective_date {get;set;} 
		public Object routing {get;set;} 
		public Object return_date {get;set;} 
		public Integer created_ts {get;set;} 
		public Integer modified_ts {get;set;} 
		public Object transaction_api_id {get;set;} 
		public Object terms_agree {get;set;} 
		public Object notification_email_address {get;set;} 
		public Boolean notification_email_sent {get;set;} 
		public Object response_message {get;set;} 
		public String auth_amount {get;set;} 
		public String auth_code {get;set;} 
		public Integer status_id {get;set;} 
		public Integer type_id {get;set;} 
		public String location_id {get;set;} 
		public Integer reason_code_id {get;set;} 
		public Object contact_id {get;set;} 
		public Object billing_zip {get;set;} 
		public Object billing_street {get;set;} 
		public String product_transaction_id {get;set;} 
		public Integer tax {get;set;} 
		public Object customer_ip {get;set;} 
		public Object customer_id {get;set;} 
		public Object po_number {get;set;} 
		public String avs_enhanced {get;set;} 
		public String cvv_response {get;set;} 
		public Object billing_phone {get;set;} 
		public Object billing_city {get;set;} 
		public Object billing_state {get;set;} 
		public Object clerk_number {get;set;} 
		public String tip_amount {get;set;} 
		public String created_user_id {get;set;} 
		public String modified_user_id {get;set;} 
		public Object settle_date {get;set;} 
		public Object charge_back_date {get;set;} 
		public Object void_date {get;set;} 
		public String account_type {get;set;} 
		public Boolean is_recurring {get;set;} 
		public Boolean is_accountvault {get;set;} 
		public Object transaction_c1 {get;set;} 
		public Object transaction_c2 {get;set;} 
		public Object transaction_c3 {get;set;} 
		public List<Additional_amounts> additional_amounts {get;set;} 
		public Object terminal_serial_number {get;set;} 
		public String entry_mode_id {get;set;} 
		public Object terminal_id {get;set;} 
		public String checkin_date {get;set;} 
		public String checkout_date {get;set;} 
		public Object room_num {get;set;} 
		public String room_rate {get;set;} 
		public Boolean advance_deposit {get;set;} 
		public Boolean no_show {get;set;} 
		public Object emv_receipt_data {get;set;} 
		public Links x_links {get;set;} // in json: _links

		public Transaction_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'payment_method') {
							payment_method = parser.getText();
						} else if (text == 'account_vault_id') {
							account_vault_id = parser.readValueAs(Object.class);
						} else if (text == 'recurring_id') {
							recurring_id = parser.readValueAs(Object.class);
						} else if (text == 'first_six') {
							first_six = parser.getText();
						} else if (text == 'last_four') {
							last_four = parser.getText();
						} else if (text == 'account_holder_name') {
							account_holder_name = parser.readValueAs(Object.class);
						} else if (text == 'transaction_amount') {
							transaction_amount = parser.getText();
						} else if (text == 'description') {
							description = parser.readValueAs(Object.class);
						} else if (text == 'transaction_code') {
							transaction_code = parser.readValueAs(Object.class);
						} else if (text == 'avs') {
							avs = parser.readValueAs(Object.class);
						} else if (text == 'batch') {
							batch = parser.getText();
						} else if (text == 'order_num') {
							order_num = parser.getText();
						} else if (text == 'verbiage') {
							verbiage = parser.getText();
						} else if (text == 'transaction_settlement_status') {
							transaction_settlement_status = parser.readValueAs(Object.class);
						} else if (text == 'effective_date') {
							effective_date = parser.readValueAs(Object.class);
						} else if (text == 'routing') {
							routing = parser.readValueAs(Object.class);
						} else if (text == 'return_date') {
							return_date = parser.readValueAs(Object.class);
						} else if (text == 'created_ts') {
							created_ts = parser.getIntegerValue();
						} else if (text == 'modified_ts') {
							modified_ts = parser.getIntegerValue();
						} else if (text == 'transaction_api_id') {
							transaction_api_id = parser.readValueAs(Object.class);
						} else if (text == 'terms_agree') {
							terms_agree = parser.readValueAs(Object.class);
						} else if (text == 'notification_email_address') {
							notification_email_address = parser.readValueAs(Object.class);
						} else if (text == 'notification_email_sent') {
							notification_email_sent = parser.getBooleanValue();
						} else if (text == 'response_message') {
							response_message = parser.readValueAs(Object.class);
						} else if (text == 'auth_amount') {
							auth_amount = parser.getText();
						} else if (text == 'auth_code') {
							auth_code = parser.getText();
						} else if (text == 'status_id') {
							status_id = parser.getIntegerValue();
						} else if (text == 'type_id') {
							type_id = parser.getIntegerValue();
						} else if (text == 'location_id') {
							location_id = parser.getText();
						} else if (text == 'reason_code_id') {
							reason_code_id = parser.getIntegerValue();
						} else if (text == 'contact_id') {
							contact_id = parser.readValueAs(Object.class);
						} else if (text == 'billing_zip') {
							billing_zip = parser.readValueAs(Object.class);
						} else if (text == 'billing_street') {
							billing_street = parser.readValueAs(Object.class);
						} else if (text == 'product_transaction_id') {
							product_transaction_id = parser.getText();
						} else if (text == 'tax') {
							tax = parser.getIntegerValue();
						} else if (text == 'customer_ip') {
							customer_ip = parser.readValueAs(Object.class);
						} else if (text == 'customer_id') {
							customer_id = parser.readValueAs(Object.class);
						} else if (text == 'po_number') {
							po_number = parser.readValueAs(Object.class);
						} else if (text == 'avs_enhanced') {
							avs_enhanced = parser.getText();
						} else if (text == 'cvv_response') {
							cvv_response = parser.getText();
						} else if (text == 'billing_phone') {
							billing_phone = parser.readValueAs(Object.class);
						} else if (text == 'billing_city') {
							billing_city = parser.readValueAs(Object.class);
						} else if (text == 'billing_state') {
							billing_state = parser.readValueAs(Object.class);
						} else if (text == 'clerk_number') {
							clerk_number = parser.readValueAs(Object.class);
						} else if (text == 'tip_amount') {
							tip_amount = parser.getText();
						} else if (text == 'created_user_id') {
							created_user_id = parser.getText();
						} else if (text == 'modified_user_id') {
							modified_user_id = parser.getText();
						} else if (text == 'settle_date') {
							settle_date = parser.readValueAs(Object.class);
						} else if (text == 'charge_back_date') {
							charge_back_date = parser.readValueAs(Object.class);
						} else if (text == 'void_date') {
							void_date = parser.readValueAs(Object.class);
						} else if (text == 'account_type') {
							account_type = parser.getText();
						} else if (text == 'is_recurring') {
							is_recurring = parser.getBooleanValue();
						} else if (text == 'is_accountvault') {
							is_accountvault = parser.getBooleanValue();
						} else if (text == 'transaction_c1') {
							transaction_c1 = parser.readValueAs(Object.class);
						} else if (text == 'transaction_c2') {
							transaction_c2 = parser.readValueAs(Object.class);
						} else if (text == 'transaction_c3') {
							transaction_c3 = parser.readValueAs(Object.class);
						} else if (text == 'additional_amounts') {
							additional_amounts = arrayOfAdditional_amounts(parser);
						} else if (text == 'terminal_serial_number') {
							terminal_serial_number = parser.readValueAs(Object.class);
						} else if (text == 'entry_mode_id') {
							entry_mode_id = parser.getText();
						} else if (text == 'terminal_id') {
							terminal_id = parser.readValueAs(Object.class);
						} else if (text == 'checkin_date') {
							checkin_date = parser.getText();
						} else if (text == 'checkout_date') {
							checkout_date = parser.getText();
						} else if (text == 'room_num') {
							room_num = parser.readValueAs(Object.class);
						} else if (text == 'room_rate') {
							room_rate = parser.getText();
						} else if (text == 'advance_deposit') {
							advance_deposit = parser.getBooleanValue();
						} else if (text == 'no_show') {
							no_show = parser.getBooleanValue();
						} else if (text == 'emv_receipt_data') {
							emv_receipt_data = parser.readValueAs(Object.class);
						} else if (text == '_links') {
							x_links = new Links(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Transaction_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static JSON2ApexIntegration parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new JSON2ApexIntegration(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	







    private static List<Additional_amounts> arrayOfAdditional_amounts(System.JSONParser p) {
        List<Additional_amounts> res = new List<Additional_amounts>();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Additional_amounts(p));
        }
        return res;
    }




}